// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: location.proto
#ifndef GRPC_location_2eproto__INCLUDED
#define GRPC_location_2eproto__INCLUDED

#include "location.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class LocationService final {
 public:
  static constexpr char const* service_full_name() {
    return "LocationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>> search(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>>(searchRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>> Asyncsearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>>(AsyncsearchRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>> PrepareAsyncsearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>>(PrepareAsyncsearchRaw(context, cq));
    }
    virtual ::grpc::Status get(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::GetLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationResponse>> Asyncget(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationResponse>>(AsyncgetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationResponse>> PrepareAsyncget(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationResponse>>(PrepareAsyncgetRaw(context, request, cq));
    }
    virtual ::grpc::Status getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::GetLocationsRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationsRequest>> AsyncgetLocations(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationsRequest>>(AsyncgetLocationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationsRequest>> PrepareAsyncgetLocations(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationsRequest>>(PrepareAsyncgetLocationsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::SearchLocationRequest,::LocationsResponse>* reactor) = 0;
      virtual void get(::grpc::ClientContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get(::grpc::ClientContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>* searchRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>* AsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::SearchLocationRequest, ::LocationsResponse>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationResponse>* AsyncgetRaw(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationResponse>* PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationsRequest>* AsyncgetLocationsRaw(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetLocationsRequest>* PrepareAsyncgetLocationsRaw(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::SearchLocationRequest, ::LocationsResponse>> search(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::SearchLocationRequest, ::LocationsResponse>>(searchRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>> Asyncsearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>>(AsyncsearchRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>> PrepareAsyncsearch(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>>(PrepareAsyncsearchRaw(context, cq));
    }
    ::grpc::Status get(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::GetLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationResponse>> Asyncget(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationResponse>>(AsyncgetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationResponse>> PrepareAsyncget(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationResponse>>(PrepareAsyncgetRaw(context, request, cq));
    }
    ::grpc::Status getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::GetLocationsRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>> AsyncgetLocations(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>>(AsyncgetLocationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>> PrepareAsyncgetLocations(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>>(PrepareAsyncgetLocationsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::SearchLocationRequest,::LocationsResponse>* reactor) override;
      void get(::grpc::ClientContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void get(::grpc::ClientContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response, std::function<void(::grpc::Status)>) override;
      void getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::SearchLocationRequest, ::LocationsResponse>* searchRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>* AsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetLocationResponse>* AsyncgetRaw(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetLocationResponse>* PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>* AsyncgetLocationsRaw(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>* PrepareAsyncgetLocationsRaw(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_get_;
    const ::grpc::internal::RpcMethod rpcmethod_getLocations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status search(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* stream);
    virtual ::grpc::Status get(::grpc::ServerContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response);
    virtual ::grpc::Status getLocations(::grpc::ServerContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::GetLocationRequest* /*request*/, ::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::GetLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getLocations() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLocations(::grpc::ServerContext* /*context*/, const ::GetLocationsRequest* /*request*/, ::GetLocationsRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLocations(::grpc::ServerContext* context, ::GetLocationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetLocationsRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_search<WithAsyncMethod_get<WithAsyncMethod_getLocations<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_search() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::SearchLocationRequest, ::LocationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->search(context); }));
    }
    ~WithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::SearchLocationRequest, ::LocationsResponse>* search(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GetLocationRequest, ::GetLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response) { return this->get(context, request, response); }));}
    void SetMessageAllocatorFor_get(
        ::grpc::MessageAllocator< ::GetLocationRequest, ::GetLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetLocationRequest, ::GetLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::GetLocationRequest* /*request*/, ::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get(
      ::grpc::CallbackServerContext* /*context*/, const ::GetLocationRequest* /*request*/, ::GetLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getLocations() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::GetLocationsRequest, ::GetLocationsRequest>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response) { return this->getLocations(context, request, response); }));}
    void SetMessageAllocatorFor_getLocations(
        ::grpc::MessageAllocator< ::GetLocationsRequest, ::GetLocationsRequest>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetLocationsRequest, ::GetLocationsRequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLocations(::grpc::ServerContext* /*context*/, const ::GetLocationsRequest* /*request*/, ::GetLocationsRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::GetLocationsRequest* /*request*/, ::GetLocationsRequest* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_search<WithCallbackMethod_get<WithCallbackMethod_getLocations<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::GetLocationRequest* /*request*/, ::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getLocations() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLocations(::grpc::ServerContext* /*context*/, const ::GetLocationsRequest* /*request*/, ::GetLocationsRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::GetLocationRequest* /*request*/, ::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getLocations() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLocations(::grpc::ServerContext* /*context*/, const ::GetLocationsRequest* /*request*/, ::GetLocationsRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLocations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_search() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->search(context); }));
    }
    ~WithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* search(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get(context, request, response); }));
    }
    ~WithRawCallbackMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::GetLocationRequest* /*request*/, ::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getLocations() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getLocations(context, request, response); }));
    }
    ~WithRawCallbackMethod_getLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLocations(::grpc::ServerContext* /*context*/, const ::GetLocationsRequest* /*request*/, ::GetLocationsRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetLocationRequest, ::GetLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetLocationRequest, ::GetLocationResponse>* streamer) {
                       return this->Streamedget(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get(::grpc::ServerContext* /*context*/, const ::GetLocationRequest* /*request*/, ::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetLocationRequest,::GetLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getLocations() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetLocationsRequest, ::GetLocationsRequest>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetLocationsRequest, ::GetLocationsRequest>* streamer) {
                       return this->StreamedgetLocations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLocations(::grpc::ServerContext* /*context*/, const ::GetLocationsRequest* /*request*/, ::GetLocationsRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetLocations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetLocationsRequest,::GetLocationsRequest>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_get<WithStreamedUnaryMethod_getLocations<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_get<WithStreamedUnaryMethod_getLocations<Service > > StreamedService;
};


#endif  // GRPC_location_2eproto__INCLUDED
