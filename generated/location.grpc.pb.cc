// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: location.proto

#include "location.pb.h"
#include "location.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* LocationService_method_names[] = {
  "/LocationService/search",
  "/LocationService/get",
  "/LocationService/getLocations",
};

std::unique_ptr< LocationService::Stub> LocationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LocationService::Stub> stub(new LocationService::Stub(channel, options));
  return stub;
}

LocationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_search_(LocationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_get_(LocationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLocations_(LocationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::SearchLocationRequest, ::LocationsResponse>* LocationService::Stub::searchRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::SearchLocationRequest, ::LocationsResponse>::Create(channel_.get(), rpcmethod_search_, context);
}

void LocationService::Stub::async::search(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::SearchLocationRequest,::LocationsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::SearchLocationRequest,::LocationsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_search_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>* LocationService::Stub::AsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::SearchLocationRequest, ::LocationsResponse>::Create(channel_.get(), cq, rpcmethod_search_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::SearchLocationRequest, ::LocationsResponse>* LocationService::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::SearchLocationRequest, ::LocationsResponse>::Create(channel_.get(), cq, rpcmethod_search_, context, false, nullptr);
}

::grpc::Status LocationService::Stub::get(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::GetLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetLocationRequest, ::GetLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_, context, request, response);
}

void LocationService::Stub::async::get(::grpc::ClientContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetLocationRequest, ::GetLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, std::move(f));
}

void LocationService::Stub::async::get(::grpc::ClientContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetLocationResponse>* LocationService::Stub::PrepareAsyncgetRaw(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetLocationResponse, ::GetLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetLocationResponse>* LocationService::Stub::AsyncgetRaw(::grpc::ClientContext* context, const ::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::GetLocationsRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetLocationsRequest, ::GetLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLocations_, context, request, response);
}

void LocationService::Stub::async::getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetLocationsRequest, ::GetLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocations_, context, request, response, std::move(f));
}

void LocationService::Stub::async::getLocations(::grpc::ClientContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>* LocationService::Stub::PrepareAsyncgetLocationsRaw(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetLocationsRequest, ::GetLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLocations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetLocationsRequest>* LocationService::Stub::AsyncgetLocationsRaw(::grpc::ClientContext* context, const ::GetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLocationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

LocationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< LocationService::Service, ::SearchLocationRequest, ::LocationsResponse>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::LocationsResponse,
             ::SearchLocationRequest>* stream) {
               return service->search(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::GetLocationRequest, ::GetLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetLocationRequest* req,
             ::GetLocationResponse* resp) {
               return service->get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::GetLocationsRequest, ::GetLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetLocationsRequest* req,
             ::GetLocationsRequest* resp) {
               return service->getLocations(ctx, req, resp);
             }, this)));
}

LocationService::Service::~Service() {
}

::grpc::Status LocationService::Service::search(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::LocationsResponse, ::SearchLocationRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::get(::grpc::ServerContext* context, const ::GetLocationRequest* request, ::GetLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::getLocations(::grpc::ServerContext* context, const ::GetLocationsRequest* request, ::GetLocationsRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


